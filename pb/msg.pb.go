// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/msg.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PayloadTypes int32

const (
	Payload_DATA       PayloadTypes = 0
	Payload_ResolveIP  PayloadTypes = 1
	Payload_IPResolved PayloadTypes = 2
	Payload_Register   PayloadTypes = 3
	Payload_Connect    PayloadTypes = 5
	Payload_Connected  PayloadTypes = 6
	Payload_ConnectErr PayloadTypes = 9
	Payload_Close      PayloadTypes = 7
	Payload_Closed     PayloadTypes = 8
)

var PayloadTypes_name = map[int32]string{
	0: "DATA",
	1: "ResolveIP",
	2: "IPResolved",
	3: "Register",
	5: "Connect",
	6: "Connected",
	9: "ConnectErr",
	7: "Close",
	8: "Closed",
}

var PayloadTypes_value = map[string]int32{
	"DATA":       0,
	"ResolveIP":  1,
	"IPResolved": 2,
	"Register":   3,
	"Connect":    5,
	"Connected":  6,
	"ConnectErr": 9,
	"Close":      7,
	"Closed":     8,
}

func (x PayloadTypes) String() string {
	return proto.EnumName(PayloadTypes_name, int32(x))
}

func (PayloadTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b6b428ebc276e4f, []int{0, 0}
}

type Payload struct {
	Data                 []byte       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Type                 PayloadTypes `protobuf:"varint,2,opt,name=type,proto3,enum=pb.PayloadTypes" json:"type,omitempty"`
	Addr                 *IPAddr      `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	SessionId            string       `protobuf:"bytes,4,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Error                string       `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6b428ebc276e4f, []int{0}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Payload) GetType() PayloadTypes {
	if m != nil {
		return m.Type
	}
	return Payload_DATA
}

func (m *Payload) GetAddr() *IPAddr {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *Payload) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *Payload) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type IPAddr struct {
	// option map_entry = true;
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Zone                 string   `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	CreateAt             int64    `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	CreateAt1            int64    `protobuf:"varint,5,opt,name=create_at1,json=createAt1,proto3" json:"create_at1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPAddr) Reset()         { *m = IPAddr{} }
func (m *IPAddr) String() string { return proto.CompactTextString(m) }
func (*IPAddr) ProtoMessage()    {}
func (*IPAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6b428ebc276e4f, []int{1}
}

func (m *IPAddr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPAddr.Unmarshal(m, b)
}
func (m *IPAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPAddr.Marshal(b, m, deterministic)
}
func (m *IPAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAddr.Merge(m, src)
}
func (m *IPAddr) XXX_Size() int {
	return xxx_messageInfo_IPAddr.Size(m)
}
func (m *IPAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAddr.DiscardUnknown(m)
}

var xxx_messageInfo_IPAddr proto.InternalMessageInfo

func (m *IPAddr) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IPAddr) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *IPAddr) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *IPAddr) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *IPAddr) GetCreateAt1() int64 {
	if m != nil {
		return m.CreateAt1
	}
	return 0
}

func init() {
	proto.RegisterEnum("pb.PayloadTypes", PayloadTypes_name, PayloadTypes_value)
	proto.RegisterType((*Payload)(nil), "pb.Payload")
	proto.RegisterType((*IPAddr)(nil), "pb.IPAddr")
}

func init() { proto.RegisterFile("pb/msg.proto", fileDescriptor_4b6b428ebc276e4f) }

var fileDescriptor_4b6b428ebc276e4f = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0xc7, 0xeb, 0x6c, 0xb2, 0xbb, 0x9e, 0x2c, 0x95, 0x19, 0x71, 0x88, 0x10, 0x1f, 0x51, 0x24,
	0x50, 0x2e, 0x84, 0x76, 0x79, 0x82, 0xd0, 0x72, 0xc8, 0xcd, 0xb2, 0xe0, 0x0a, 0x4a, 0xea, 0x51,
	0x15, 0x29, 0x8d, 0x23, 0xdb, 0x20, 0x96, 0x1b, 0x57, 0x9e, 0x81, 0x87, 0x45, 0xf1, 0xa6, 0x65,
	0x6f, 0xbd, 0xcd, 0xff, 0x63, 0x14, 0xcd, 0x2f, 0x86, 0xdd, 0xd4, 0xbd, 0xbf, 0x73, 0xb7, 0xd5,
	0x64, 0x8d, 0x37, 0x18, 0x4d, 0x5d, 0xf1, 0x37, 0x82, 0x8d, 0x6c, 0x0f, 0x83, 0x69, 0x35, 0x22,
	0xc4, 0xba, 0xf5, 0x6d, 0xc6, 0x72, 0x56, 0xee, 0x54, 0x98, 0xf1, 0x0d, 0xc4, 0xfe, 0x30, 0x51,
	0x16, 0xe5, 0xac, 0x3c, 0xdf, 0x3f, 0xad, 0xa6, 0xae, 0x5a, 0xea, 0xd5, 0xec, 0x3b, 0x15, 0x62,
	0x7c, 0x05, 0x71, 0xab, 0xb5, 0xcd, 0x56, 0x39, 0x2b, 0xd3, 0x3d, 0xcc, 0xb5, 0x46, 0xd6, 0x5a,
	0x5b, 0x15, 0x7c, 0x7c, 0x01, 0xdc, 0x91, 0x73, 0xbd, 0x19, 0x1b, 0x9d, 0xc5, 0x39, 0x2b, 0xb9,
	0xfa, 0x6f, 0xe0, 0x33, 0x48, 0xc8, 0x5a, 0x63, 0xb3, 0x24, 0x24, 0x47, 0x51, 0xfc, 0x66, 0x90,
	0x84, 0x6f, 0xe0, 0x16, 0xe2, 0xeb, 0xfa, 0x73, 0x2d, 0xce, 0xf0, 0x09, 0x70, 0x45, 0xce, 0x0c,
	0x3f, 0xa8, 0x91, 0x82, 0xe1, 0x39, 0x40, 0x23, 0x17, 0x43, 0x8b, 0x08, 0x77, 0xb0, 0x55, 0x74,
	0xdb, 0x3b, 0x4f, 0x56, 0xac, 0x30, 0x85, 0xcd, 0x95, 0x19, 0x47, 0xba, 0xf1, 0x22, 0x99, 0x37,
	0x17, 0x41, 0x5a, 0xac, 0xe7, 0xcd, 0x45, 0x7e, 0xb2, 0x56, 0x70, 0xe4, 0x90, 0x5c, 0x0d, 0xc6,
	0x91, 0xd8, 0x20, 0xc0, 0x3a, 0x8c, 0x5a, 0x6c, 0x8b, 0x3f, 0x0c, 0xd6, 0xc7, 0x43, 0x30, 0x83,
	0xcd, 0x7c, 0x0a, 0x39, 0x17, 0x00, 0x71, 0x75, 0x2f, 0x1f, 0xb8, 0x45, 0x27, 0xdc, 0x10, 0xe2,
	0x5f, 0x66, 0xa4, 0x00, 0x84, 0xab, 0x30, 0xe3, 0x6b, 0xe0, 0x37, 0x96, 0x5a, 0x4f, 0xdf, 0x5a,
	0x1f, 0x20, 0xac, 0x3e, 0x46, 0x17, 0x91, 0xda, 0x1e, 0xcd, 0xda, 0xe3, 0x4b, 0x80, 0x87, 0xc2,
	0x65, 0x80, 0xb1, 0x52, 0xfc, 0x3e, 0xbd, 0xdc, 0x7f, 0x85, 0x44, 0x5a, 0xf3, 0xf3, 0x80, 0x6f,
	0x21, 0x96, 0xdf, 0xef, 0x26, 0x4c, 0x4f, 0x7e, 0xc7, 0xf3, 0x53, 0x51, 0x9c, 0x95, 0xec, 0x82,
	0xe1, 0x3b, 0x48, 0x65, 0x3f, 0xd1, 0xd0, 0x8f, 0xf4, 0xe5, 0x5a, 0x3e, 0x56, 0xef, 0xd6, 0xe1,
	0x59, 0x7c, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0x58, 0x5c, 0xdd, 0x7d, 0x26, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyClient interface {
	Pump(ctx context.Context, opts ...grpc.CallOption) (Proxy_PumpClient, error)
	PipelineUDP(ctx context.Context, opts ...grpc.CallOption) (Proxy_PipelineUDPClient, error)
}

type proxyClient struct {
	cc *grpc.ClientConn
}

func NewProxyClient(cc *grpc.ClientConn) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) Pump(ctx context.Context, opts ...grpc.CallOption) (Proxy_PumpClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Proxy_serviceDesc.Streams[0], "/pb.Proxy/Pump", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyPumpClient{stream}
	return x, nil
}

type Proxy_PumpClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type proxyPumpClient struct {
	grpc.ClientStream
}

func (x *proxyPumpClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyPumpClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) PipelineUDP(ctx context.Context, opts ...grpc.CallOption) (Proxy_PipelineUDPClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Proxy_serviceDesc.Streams[1], "/pb.Proxy/PipelineUDP", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyPipelineUDPClient{stream}
	return x, nil
}

type Proxy_PipelineUDPClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type proxyPipelineUDPClient struct {
	grpc.ClientStream
}

func (x *proxyPipelineUDPClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyPipelineUDPClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyServer is the server API for Proxy service.
type ProxyServer interface {
	Pump(Proxy_PumpServer) error
	PipelineUDP(Proxy_PipelineUDPServer) error
}

func RegisterProxyServer(s *grpc.Server, srv ProxyServer) {
	s.RegisterService(&_Proxy_serviceDesc, srv)
}

func _Proxy_Pump_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).Pump(&proxyPumpServer{stream})
}

type Proxy_PumpServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type proxyPumpServer struct {
	grpc.ServerStream
}

func (x *proxyPumpServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyPumpServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Proxy_PipelineUDP_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).PipelineUDP(&proxyPipelineUDPServer{stream})
}

type Proxy_PipelineUDPServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type proxyPipelineUDPServer struct {
	grpc.ServerStream
}

func (x *proxyPipelineUDPServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyPipelineUDPServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Proxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pump",
			Handler:       _Proxy_Pump_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PipelineUDP",
			Handler:       _Proxy_PipelineUDP_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/msg.proto",
}
